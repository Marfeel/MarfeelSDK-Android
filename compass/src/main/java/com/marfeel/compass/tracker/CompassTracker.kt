package com.marfeel.compass.tracker

import android.content.Context
import android.util.DisplayMetrics
import android.util.Log
import android.view.View
import android.view.ViewGroup
import android.widget.FrameLayout
import android.widget.ListView
import android.widget.ScrollView
import androidx.core.view.ScrollingView
import androidx.core.widget.NestedScrollView
import androidx.recyclerview.widget.RecyclerView
import com.marfeel.compass.core.Page
import com.marfeel.compass.core.PingEmitter
import com.marfeel.compass.core.UserType
import com.marfeel.compass.di.CompassComponent
import com.marfeel.compass.memory.Memory
import com.marfeel.compass.storage.Storage
import com.marfeel.compass.usecase.GetRFV
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.launch

private const val compassNotInitializedErrorMessage =
    "Compass not initialized. Make sure CompassTracking::initialize has been called"

/**
 * CompassTracking is the entry point for all interactions with the library.
 * To access to CompassTracking just retrieve its singleton instance by calling [CompassTracking.getInstance].
 *
 */
interface CompassTracking {
    /**
     * Starts to track the time a user remains on a page given by the [url] parameter.
     *
     * @param url the url of the page being tracked.
     */
    fun startPageView(url: String)

    /**
     * Starts to track the time a user remains on the page given by the [url] parameter as well as the scroll percentage of the content.
     *
     * @param url the url of the page being tracked.
     * @param scrollView view showing the url content.
     */
    fun<T> startPageView(url: String, scrollView: T) where T: FrameLayout, T: ScrollingView
    fun startPageView(url: String, scrollView: RecyclerView)

    /**
     * Stops the tracking.
     */
    fun stopTracking()

    /**
     * Associates the user of the application with the records generated by Compass.
     * @param userId the user's identifier in your platform
     */
    fun setUserId(userId: String)

    /**
     * Sets the user type.
     * @param userType The user type.
     */
    fun setUserType(userType: UserType)

    /**
     * Gets the RFV code from Compass.
     *
     * This function should not be called from the main thread, **if it is called from the main thread, an exception is thrown**.
     */
    fun getRFV(): String?

    /**
     * Gets the RFV code from Compass asynchronously.
     *
     * @param onResult the callback function to handle te result.
     */
    fun getRFV(onResult: (String?) -> Unit)

    fun trackConversion(conversion: String)

    companion object {
        /**
         * Prepare the Compass SDK to track the pages.
         *
         * Typically you should initialize the Compass SDK from your Application class.
         * @param context The Android Context.
         * @param accountId Compass account id.
         */
        fun initialize(context: Context, accountId: String) {
            CompassComponent.context = context.applicationContext
            if (!CompassTracker.initialized) {
                CompassTracker.initialize(accountId)
            }
        }

        /**
         *
         * @return The singleton instance of the CompassTracking interface
         */
        fun getInstance(): CompassTracking = CompassTracker
    }
}

internal object CompassTracker : CompassTracking {

    private val pingEmitter: PingEmitter by lazy { CompassComponent.pingEmitter }
    private val storage: Storage by lazy { CompassComponent.storage }
    private val memory: Memory by lazy { CompassComponent.memory }
    private val getRFV: GetRFV by lazy { CompassComponent.getRFV() }
    private val coroutineScope = CoroutineScope(Dispatchers.IO)

    internal val initialized: Boolean
        get() = memory.readAccountId() != null

    internal fun initialize(accountId: String) {
        memory.updateAccountId(accountId)
        memory.updateSession()
    }

    override fun startPageView(url: String) {
        check(initialized) { compassNotInitializedErrorMessage }
        memory.updatePage(Page(url))
        pingEmitter.start(url)
    }

    override fun<T> startPageView(url: String, scrollView: T) where T: FrameLayout, T: ScrollingView {
        startPageView(url, scrollView, fun(view: T, scroll: Int, _: Int): Double {
            val scrollViewHeight = (view.getChildAt(0).bottom - scrollView.height).toDouble()

            return scroll.toDouble() / scrollViewHeight * 100
        })
    }

    override fun startPageView(url: String, scrollView: RecyclerView) {
        var currentScroll = 0;

        startPageView(url, scrollView, fun(view: RecyclerView, scroll: Int, oldScroll: Int): Double {
                val scrollViewHeight =
                    (view.computeVerticalScrollRange() - view.computeVerticalScrollExtent()).toDouble()
                val dScroll = scroll - oldScroll
                currentScroll += dScroll

                return currentScroll / scrollViewHeight * 100
            }
        )
    }

    private fun<T> startPageView(
        url: String,
        scrollView: T,
        scrollMeasurer: (view: T, scrollY: Int, oldScrollY: Int) -> Double)
    where T: ViewGroup, T: ScrollingView {
        check(initialized) { compassNotInitializedErrorMessage }
        scrollView.setOnScrollChangeListener(object: View.OnScrollChangeListener {
            override fun onScrollChange(view: View?, scrollX: Int, scrollY: Int, oldScrollX: Int, oldScrollY: Int) {
                view?.let {
                    val scrollPosition = scrollMeasurer(view as T, scrollY, oldScrollY).toScrollPercentage();

                    pingEmitter.updateScrollPercentage(scrollPosition);

                    Log.d("Compass scroll", "$scrollPosition")
                }
            }
        })

        startPageView(url)
    }

    internal fun Double.toScrollPercentage(): Int {
        val range = 0..100
        return when {
            this > range.last -> range.last
            else -> this.toInt()
        }
    }

    override fun stopTracking() {
        check(initialized) { compassNotInitializedErrorMessage }
        pingEmitter.stop()
    }

    override fun setUserId(userId: String) {
        check(initialized) { compassNotInitializedErrorMessage }
        storage.updateUserId(userId)
    }

    override fun setUserType(userType: UserType) {
        check(initialized) { compassNotInitializedErrorMessage }
        storage.updateUserType(userType)
    }

    internal fun updateScrollPercentage(scrollPosition: Int) {
        check(initialized) { compassNotInitializedErrorMessage }
        pingEmitter.updateScrollPercentage(scrollPosition)
    }

    override fun getRFV(): String? =
        getRFV.invoke()

    override fun getRFV(onResult: (String?) -> Unit) {
        check(initialized) { compassNotInitializedErrorMessage }
        coroutineScope.launch {
            val response = getRFV()
            onResult(response)
        }
    }

    override fun trackConversion(conversion: String) {
        check(initialized) { compassNotInitializedErrorMessage }
        memory.addPendingConversion(conversion)
    }
}
