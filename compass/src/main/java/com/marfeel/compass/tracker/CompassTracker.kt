package com.marfeel.compass.tracker

import android.content.Context
import androidx.core.widget.NestedScrollView
import com.marfeel.compass.core.Page
import com.marfeel.compass.core.PingEmitter
import com.marfeel.compass.core.Session
import com.marfeel.compass.core.UserType
import com.marfeel.compass.di.CompassKoinComponent
import com.marfeel.compass.di.addAndroidContextToDiApplication
import com.marfeel.compass.memory.Memory
import com.marfeel.compass.storage.Storage
import com.marfeel.compass.usecase.GetRFV
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.launch
import org.koin.core.component.inject

private const val compassNotInitializedErrorMessage =
    "Compass not initialized. Make sure CompassTracking::initialize has been called"

/**
 * CompassTracking is the entry point for all interactions with the library.
 * To access to CompassTracking just retrieve its singleton instance by calling [CompassTracking.getInstance].
 *
 */
interface CompassTracking {
    /**
     * Starts to track the time a user remains on a page given by the [url] parameter.
     *
     * @param url the url of the page being tracked.
     */
    fun startPageView(url: String)

    /**
     * Starts to track the time a user remains on the page given by the [url] parameter as well as the scroll percentage of the content.
     *
     * @param url the url of the page being tracked.
     * @param scrollView view showing the url content.
     */
    fun startPageView(url: String, scrollView: NestedScrollView)

    /**
     * Stops the tracking.
     */
    fun stopTracking()

    /**
     * Associates the user of the application with the records generated by Compass.
     * @param userId the user's identifier in your platform
     */
    fun setUserId(userId: String)

    /**
     * Sets the user type.
     * @param userType The user type.
     */
    fun setUserType(userType: UserType)

    /**
     * Gets the RFV code from Compass.
     *
     * This function should not be called from the main thread, **if it is called from the main thread, an exception is thrown**.
     */
    fun getRFV(): String?

    /**
     * Gets the RFV code from Compass asynchronously.
     *
     * @param onResult the callback function to handle te result.
     */
    fun getRFV(onResult: (String?) -> Unit)

    fun trackConversion(conversion: String)

    companion object {
        /**
         * Prepare the Compass SDK to track the pages.
         *
         * Typically you should initialize the Compass SDK from your Application class.
         * @param context The Android Context.
         * @param accountId Compass account id.
         */
        fun initialize(context: Context, accountId: String) {
            addAndroidContextToDiApplication(context)
            if (!CompassTracker.initialized){
                CompassTracker.initialize(accountId)
            }
        }

        /**
         *
         * @return The singleton instance of the CompassTracking interface
         */
        fun getInstance(): CompassTracking = CompassTracker
    }
}

internal object CompassTracker : CompassTracking, CompassKoinComponent {

    private val pingEmitter: PingEmitter by inject()
    private val storage: Storage by inject()
    private val memory: Memory by inject()
    private val getRFV: GetRFV by inject()
    private val coroutineScope = CoroutineScope(Dispatchers.IO)

    internal val initialized: Boolean
        get() = memory.readAccountId() != null

    internal fun initialize(accountId: String) {
        memory.updateAccountId(accountId)
		memory.updateSession()
    }

    override fun startPageView(url: String) {
        check(initialized) { compassNotInitializedErrorMessage }
        memory.updatePage(Page(url))
        pingEmitter.start(url)
    }

    override fun startPageView(url: String, scrollView: NestedScrollView) {
        check(initialized) { compassNotInitializedErrorMessage }
        scrollView.setOnScrollChangeListener(
            NestedScrollView.OnScrollChangeListener { view, _, scrollY, _, _ ->
                val scrollViewHeight: Double =
                    (view.getChildAt(0).bottom - scrollView.height).toDouble()
                val scrollPosition = scrollY.toDouble() / scrollViewHeight * 100
                (scrollView.getChildAt(0).bottom - scrollView.height).toDouble()
                pingEmitter.updateScrollPercentage(scrollPosition.toScrollPercentage())
            }
        )
        startPageView(url)
    }

    internal fun Double.toScrollPercentage(): Int {
        val range = 0..100
        return when {
            this > range.last -> range.last
            else -> this.toInt()
        }
    }

    override fun stopTracking() {
        check(initialized) { compassNotInitializedErrorMessage }
        pingEmitter.stop()
    }

    override fun setUserId(userId: String) {
        check(initialized) { compassNotInitializedErrorMessage }
        storage.updateUserId(userId)
    }

    override fun setUserType(userType: UserType) {
        check(initialized) { compassNotInitializedErrorMessage }
        storage.updateUserType(userType)
    }

    internal fun updateScrollPercentage(scrollPosition: Int) {
        check(initialized) { compassNotInitializedErrorMessage }
        pingEmitter.updateScrollPercentage(scrollPosition)
    }

    override fun getRFV(): String? =
        getRFV.invoke()

    override fun getRFV(onResult: (String?) -> Unit) {
        check(initialized) { compassNotInitializedErrorMessage }
        coroutineScope.launch {
            val response = getRFV()
            onResult(response)
        }
    }

    override fun trackConversion(conversion: String) {
        check(initialized) { compassNotInitializedErrorMessage }
        memory.addPendingConversion(conversion)
    }
}
